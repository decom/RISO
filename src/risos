#!/bin/bash

#Variáveis do script
dir_riso=/usr/riso
dir_img=$dir_riso/imagens
img_win=$dir_img/windows.img
img_lin=$dir_img/linux.tar
tor_win=$img_win.torrent
tor_lin=$img_lin.torrent
dir_www=/var/www/html
riso_part=$dir_riso/riso.part
arq_log=$dir_riso/riso.log

#Função de Log
log(){
    [ -e $arq_log ] || touch $arq_log
    echo `date +"%F %H:%M:%S"` "RISOS: $*" >> $arq_log 
}

#Carrega variaveis que serão utilizadas no arquivo riso.service.
carregar_variaveis() {
    
    #Partições
    partefi="/dev/sda6"
    partwindows="/dev/sda2"
    partlinux="/dev/sda3"
    
    #Sistemas de arquivos
    sa_partwindows=`blkid ${partwindows} | tr ' ' '\n' | grep "^TYPE=" | cut -d'"' -f2` 
    sa_partlinux=`blkid ${partlinux} | tr ' ' '\n' | grep "^TYPE=" | cut -d'"' -f2`

    
    #Tamanho total das imagens criadas no servidor.
    if [ -e ${img_win} ]; then
        tamwindows=`du ${img_win} | cut -f1`
    fi
    if [ -e ${img_lin} ]; then
        tamlinux=`du ${img_lin} | cut -f1`
    fi

    #UUID das partições
    efiUUID=`blkid ${partefi} | tr ' ' '\n' | grep "^UUID=" | head -n 1 | cut -d'"' -f2`
    windowsUUID=`blkid ${partwindows} | tr ' ' '\n' | grep "^UUID=" | head -n 1 | cut -d'"' -f2` 
    linuxUUID=`blkid ${partlinux} | tr ' ' '\n' | grep "^UUID=" | head -n 1 | cut -d'"' -f2` 
    
    #Atualiza arquivo de variaveis.
    echo 'partwindows='$partwindows > $riso_part
    echo 'partlinux='$partlinux >> $riso_part
    echo 'sa_partwindows='$sa_partwindows >> $riso_part
    echo 'sa_partlinux='$sa_partlinux >> $riso_part
    echo 'efiUUID='$efiUUID >> $riso_part
    echo 'windowsUUID='$windowsUUID >> $riso_part
    echo 'linuxUUID='$linuxUUID >> $riso_part
     
}

#Verifica se o servidor está conectado
verificar_conexao(){
    servidor=`ip route | grep src | cut -d ' ' -f12`
    if [ -z $servidor ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox 'O servidor RISOS precisa estar conectado à rede. Verifique sua conexão e tente novamente.' \
        0 0
        log "ERRO: Servidor não conectado à rede."
        exit 1
    fi   
}

#Inicia tracker para disponibilizar imagens na rede.
iniciar_servidor() {
    carregar_variaveis;
    if [ -e ${img_win} -a -e ${img_lin} ]; then
        if [ -e "${tor_lin}" -a -e "${tor_win}" ]; then
            Windows_IP=`grep "$servidor" ${dir_img}/Windows_IP | wc -l`
            Linux_IP=`grep "$servidor" ${dir_img}/Linux_IP | wc -l`
               if [[ 1 -eq $Windows_IP && 1 -eq $Linux_IP ]]; then
                criar_riso_service;
                cp "${tor_lin}" "${tor_win}" "${dir_www}"
                log "Tracker iniciado para Windows e Linux."
                bttrack --port 6969 --dfile dstate > /dev/null &
                cd ${dir_img}    
                rtorrent ${tor_lin} ${tor_win}
                rm -f /etc/avahi/services/*
                log "Tracker finalizado para Windows e Linux."
            else
                dialog \
                --title 'Atenção' \
                --ok-label 'OK' \
                --msgbox '\n Os torrents não possuem o mesmo IP do servidor. Recrie os torrents.' \
                7 40
                log "ERRO: Ao iniciar tracker para Windows e Linux, IPs do torrents diferetens do IP do servidor."
                return 2
            fi
        else
            dialog \
            --title 'Atenção' \
            --ok-label 'OK' \
            --msgbox '\n Não existem torrents prontos. Crie os torrents' \
            7 40
            log "ERRO: Ao iniciar tracker para Windows e Linux, Não existem torrents prontos."
            return 2
        fi                
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\n   Não existem imagens prontas. Crie as imagens' \
        7 40
        log "ERRO: Ao iniciar tracker para Windows e Linux, Não existem imagens prontas."
        return 2
    fi    
}

#Inicia tracker para disponibilizar imagem do Windows na rede.
iniciar_servidor_windows() {
    carregar_variaveis;
    if [ -e ${img_win} ]; then
        if [ -e "${tor_win}" ]; then
            Windows_IP=`grep "$servidor" ${dir_img}/Windows_IP | wc -l`
               if [ 1 -eq $Windows_IP ]; then
                criar_riso_service;
                cp "${tor_win}" "${dir_www}"
                log "Tracker iniciado para Windows."
                bttrack --port 6969 --dfile dstate > /dev/null &
                cd ${dir_img}    
                rtorrent ${tor_win}
                rm -f /etc/avahi/services/*
                log "Tracker finalizado para Windows."
            else
                dialog \
                --title 'Atenção' \
                --ok-label 'OK' \
                --msgbox '\n O torrent do Windows não possui o mesmo IP do servidor. Recrie o torrent.' \
                7 40
                log "ERRO: Ao iniciar tracker para Windows, Não existe imagem do Windows pronta."
                return 2
            fi
        else
            dialog \
            --title 'Atenção' \
            --ok-label 'OK' \
            --msgbox '\n Não existe torrent do Windows pronto. Crie o torrent.' \
            7 40
            log "ERRO: Ao iniciar tracker para Windows, Não existe torrent pronto."
            return 2
        fi                
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\n   Não existe imagem do Windows pronta. Crie a imagem.' \
        7 40
        log "ERRO: Ao iniciar tracker para Windows, Não existe imagem pronta."
        return 2
    fi    
}

#Inicia tracker para disponibilizar imagem do Linux na rede.
iniciar_servidor_linux() {
	carregar_variaveis;
    if [ -e ${img_lin} ]; then
        if [ -e "${tor_lin}" ]; then
            Linux_IP=`grep "$servidor" ${dir_img}/Linux_IP | wc -l`
               if [ 1 -eq $Linux_IP ]; then
                criar_riso_service;
                cp "${tor_lin}" "${dir_www}"
                log "Tracker iniciado para Linux."
                bttrack --port 6969 --dfile dstate > /dev/null &
                cd ${dir_img}    
                rtorrent ${tor_lin}
                rm -f /etc/avahi/services/*
                log "Tracker finalizado para Linux."
            else
                dialog \
                --title 'Atenção' \
                --ok-label 'OK' \
                --msgbox '\n O torrent do Linux não possui o mesmo IP do servidor. Recrie o torrent.' \
                7 40
                log "ERRO: Ao iniciar tracker para Linux, Não existe imagem do Linux pronta."
                return 2
            fi
        else
            dialog \
            --title 'Atenção' \
            --ok-label 'OK' \
            --msgbox '\n Não existe torrent do Linux pronto. Crie o torrent.' \
            7 40
            log "ERRO: Ao iniciar tracker para Linux, Não existe torrent pronto."
            return 2
        fi                
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\n   Não existe imagem do Linux pronta. Crie a imagem.' \
        7 40
        log "ERRO: Ao iniciar tracker para Linux, Não existe imagem pronta."
        return 2
    fi
}

#Cria imagem do Linux.
criar_linux() {
	carregar_variaveis;
    log "Criando imagem do Linux."
    echo "Removendo imagem antiga do linux..."
    rm -f ${img_lin}
    rm -f ${tor_lin}
    
    #Cria arquivo .tar do linux
    umount /mnt 2> /dev/null
    mount ${partlinux} /mnt
    cd /mnt
    tar -cvf ${img_lin} *
    
    umount /mnt 2> /dev/null
    
    log "Imagem do Linux criada."
}

#Cria arquivo .torrent para imagem do linux
cria_torrent_linux() {
    
    if [ -e $img_lin ]; then
        log "Criando arquivo torrent do linux."
        #Cria o torrent
        btmakemetafile.bittorrent ${img_lin} http://${servidor}:6969/announce 2> /dev/null
    
        #Guarda IP de criação do Torrent
        echo $servidor > $dir_img/Linux_IP 

        log "Arquivo torrent do Linux criado."
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do Linux.' \
        7 44
        log "ERRO: Ao criar arquivo torrent do Linux, não existe imagem pronta."
        return 2
    fi
    
}

#Cria imagem do Windows.
cria_windows() {
    carregar_variaveis;
    log "Criando imagem do Windows."
    echo "Removendo imagem antiga do windows..."
    rm -f ${img_win}
    rm -f ${tor_win}
    
    #Se estiver usando windows 7. Muda arquivo de boot para não usar mais UUID.
    windows7=`os-prober | grep "Windows 7"`
    if [ ! -z "$windows7" ]; then
        echo "Configurando Windows 7..."
        umount /mnt 2> /dev/null
        mount ${partwindows} /mnt
        cp ${dir_riso}/BCD /mnt/Boot/BCD
        umount /mnt 2> /dev/null
    fi
    

    #Cria arquivo .img do windows
    umount ${partwindows} 2> /dev/null
    ntfsclone -s -O ${img_win} ${partwindows}
    
    #Se não conseguiu criar a imagem
    if [ "$?" -ne "0" ]; then
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox 'Não consegui criar uma imagem do Windows.\n
O sistema operacional pode ainda não ter sido instalado.\n
A partição ou o sistema de arquivo indicados pelas variáveis\n
partwindows e sa_partwindows em /etc/avahi/services/riso.service\n
pode estar incorreta.\n' \
        0 0
        log "ERRO: Ao criar imagem do Windows, ntfsclone falhou ao criar arquivo windows.img."
        return 3
    fi

    log "Imagem do Windows criada."
    
}

#Cria arquivo .torrent para imagem do windows.
cria_torrent_windows() {
    
    if [ -e ${img_win} ]; then
        log "Criando arquivo torrent do windows."
        btmakemetafile.bittorrent ${img_win} http://${servidor}:6969/announce 2> /dev/null
       
        #Guarda IP de criação do Torrent
        echo $servidor > $dir_img/Windows_IP 
        
        log "Arquivo torrent do windows criado."
    else
        dialog \
        --title 'Atenção' \
        --ok-label 'OK' \
        --msgbox '\nVocê ainda não criou a imagem do windows.' \
        7 45
        log "ERRO: Ao criar torrent do windows, não existe imagem pronta."
        return 2
    fi
}

#Cria riso.services
criar_riso_service() {
    echo "Criando arquivo de configuração..."
    echo '<?xml version="1.0" standalone="no"?><!--*-nxml-*-->' > /etc/avahi/services/riso.service
    echo '<!DOCTYPE service-group SYSTEM "avahi-service.dtd">' >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '<!--riso.service -->' >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '<!--' >> /etc/avahi/services/riso.service
    echo '  Arquivo com as variáveis de configuração do riso.' >> /etc/avahi/services/riso.service
    echo '  Essas variáveis são usadas para efetuar a comunicação do servidor riso(risos) com os cliente(riso).' >> /etc/avahi/services/riso.service
    echo '  Para mais informações sobre o processo ver http://avahi.org' >> /etc/avahi/services/riso.service
    echo '-->' >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '<service-group>' >> /etc/avahi/services/riso.service
    echo '  <name>Servidor RISO DECOM</name>' >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '  <service>' >> /etc/avahi/services/riso.service
    echo '    <!--Nome do serviço-->' >> /etc/avahi/services/riso.service
    echo "    <type>_DECOM_RISO._tcp</type>" >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '    <!--Campo não é usado-->' >> /etc/avahi/services/riso.service
    echo '    <port>1234</port>' >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '    <!--Ip do servidor-->' >> /etc/avahi/services/riso.service # modifiçaco para guarda o ip do servidor
    echo "    <txt-record>servidor=$servidor</txt-record>" >> /etc/avahi/services/riso.service #
    echo '' >> /etc/avahi/services/riso.service #
    echo '    <!--Variáveis com sistema de arquivo das partições-->' >> /etc/avahi/services/riso.service
    echo "    <txt-record>sa_partlinux=${sa_partlinux}</txt-record>" >> /etc/avahi/services/riso.service
    echo "    <txt-record>sa_partwindows=${sa_partwindows}</txt-record>" >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '    <!--Variáveis com tamanho das imagens geradas no servidor-->' >> /etc/avahi/services/riso.service
    echo "    <txt-record>tamlinux=${tamlinux}</txt-record>" >> /etc/avahi/services/riso.service
    echo "    <txt-record>tamwindows=${tamwindows}</txt-record>" >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '    <!--Localização dos sistemas operacionais no HD-->' >> /etc/avahi/services/riso.service
    echo "    <txt-record>partlinux=${partlinux}</txt-record>" >> /etc/avahi/services/riso.service
    echo "    <txt-record>partwindows=${partwindows}</txt-record>" >> /etc/avahi/services/riso.service
       echo '' >> /etc/avahi/services/riso.service
    echo '    <!--UUID - Partição Linux-->' >> /etc/avahi/services/riso.service
    echo "    <txt-record>linuxUUID=${linuxUUID}</txt-record>" >> /etc/avahi/services/riso.service
    echo '' >> /etc/avahi/services/riso.service
    echo '  </service>' >> /etc/avahi/services/riso.service
    echo '</service-group>' >> /etc/avahi/services/riso.service
}


#Pessoas que desenvolveram esse material.
creditos() {

    dialog \
    --ok-label 'OK' \
    --title 'Créditos' \
    --msgbox '                                       \n
         CENTRO FEDERAL DE EDUCAÇAO TECNOLOGICA  \n
                Engenharia de Computaçao         \n
                                                 \n
              Cristiano Goulart Lopes Dias       \n
            Vinicius Tinti de Paula Oliveira     \n
               Germano Teixeira de Miranda       \n
                Gabriel de Souza Brandao         \n
                 Marcio J. Menezes Jr.           \n
            Gabriel Machado de Castro Fonseca    \n
              André Luiz Silveira Herculano      \n
               Gilmar Pereira de Alcantara       \n
                Alain André Tomaz Amaral         \n
                                                 \n
                   www.dgo.cefetmg.br            \n
                  www.decom.cefetmg.br           \n
                                                 \n'\
          0 0
}

#Notificação para imagem criada com sucesso
linux_criado() {

    dialog \
    --ok-label 'OK' \
    --title 'Atenção' \
    --msgbox '\nImagem do Linux criada com sucesso.\n' \
        7 40
}

#Notificação para imagem criada com sucesso
windows_criado() {

    dialog \
    --ok-label 'OK' \
    --title 'Atenção' \
    --msgbox '\n Imagem do Windows criada com sucesso.\n' \
        7 43
}

#Notificação para imagens criadas com sucesso
imagens_criadas() {

    dialog \
    --ok-label 'OK' \
    --title 'Atenção' \
    --msgbox '\n  Imagens criadas com sucesso.\n' \
        7 37
}

#Notificação para torrent criado com sucesso
torrent_linux_criado() {

    dialog \
    --ok-label 'OK' \
    --title 'Atenção' \
    --msgbox '\n  Torrent Linux criado com sucesso.\n' \
        7 42
}

#Notificação para torrent criado com sucesso
torrent_windows_criado() {

    dialog \
    --ok-label 'OK' \
    --title 'Atenção' \
    --msgbox '\n  Torrent Windows criado com sucesso.\n' \
        7 43
}

#Notificação para torrent criado com sucesso
torrents_criados() {

    dialog \
    --ok-label 'OK' \
    --title 'Atenção' \
    --msgbox '\nTorrents do Windows e Linux criados com sucesso.\n' \
        8 0
}

#Acredite isso é um help.
ajuda() {

    dialog \
    --ok-label 'OK' \
    --title 'Ajuda' \
    --msgbox 'Envie um e-mail com suas dúvidas ou sugestões para: 
"alainandre@decom.cefetmg.br" \n e responderei o mais rápido possível.' \
        0 0
}

#Checklist de seleção.
menu_iniciar_servidor() {

    opcao=$( dialog --stdout \
    --ok-label 'Confirmar'   \
    --checklist 'Quais imagens deseja disponibilizar para o download na rede:' \
    0 0 0 \
    Windows '' ON  \
    Linux '' ON )

    # De acordo com a opção escolhida, executa funcoes
    case $opcao in
        "Windows") iniciar_servidor_windows;;
        "Linux") iniciar_servidor_linux;;
        "Windows Linux") iniciar_servidor;;
    esac
    
}

#Checklist de seleção.
menu_criar_imagens() {

    opcao=$( dialog --stdout \
    --ok-label 'Confirmar'   \
    --checklist 'Quais imagens deseja criar:' \
    0 0 0 \
    Windows '' ON  \
    Linux '' ON  )

    # De acordo com a opção escolhida, executa funcoes
    case $opcao in
        "Windows") cria_windows && cria_torrent_windows && windows_criado;;
        "Linux") criar_linux && cria_torrent_linux && linux_criado;;
        "Windows Linux") cria_windows && cria_torrent_windows && criar_linux && cria_torrent_linux && imagens_criadas;;
    esac
    
}

#Checklist de seleção.
menu_criar_torrents() {

    opcao=$( dialog --stdout \
    --ok-label 'Confirmar'   \
    --checklist 'Quais torrents deseja criar:' \
    0 0 0 \
    Windows '' ON  \
    Linux '' ON  )

    # De acordo com a opção escolhida, executa funcoes
    case $opcao in
        "Windows") cria_torrent_windows && torrent_windows_criado;;
        "Linux") cria_torrent_linux && torrent_linux_criado;;
        "Windows Linux") cria_torrent_windows && cria_torrent_linux && torrents_criados;;
    esac
    
}

#Menu pricipal.
menu() {

    while : ; do
    opcao=$(
        dialog --stdout                         \
        --ok-label 'Confirmar'                  \
        --cancel-label 'Sair'                   \
        --title 'RISOS - 1.0'                   \
        --menu 'Escolha o que voce quer fazer:' \
            0 0 0                               \
            1 'Iniciar servidor'                \
            2 'Criar imagens'                   \
            3 'Criar torrents'                  \
            4 'Créditos'                        \
            5 'Ajuda'                            )
    
        # ESC, sai do programa...
        [ $? -ne 0 ] && break
    
        # De acordo com a opção escolhida, executa funçao
        case $opcao in
            1) verificar_conexao && menu_iniciar_servidor;;
            2) menu_criar_imagens;;
            3) verificar_conexao && menu_criar_torrents;;
            4) creditos;;
            5) ajuda;;
        esac    

    done
    
}

#Verifica se usuário é root antes de iniciar o risos.
USER=`id -u`
if [ $USER == '0' ]; then
    log "Iniciando RISOS -------------------------------------------------------"
    rm -f /etc/avahi/services/*
    carregar_variaveis && menu
    log "Finalizando RISOS -----------------------------------------------------"
    clear
else
    echo "Este script deve ser executado com o usuario root"
    echo "\"Great scripts come with great responsabilities...\" - Uncle Juan"
    exit 1
fi
